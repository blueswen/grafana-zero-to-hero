version: "3.4"

services:
  grafana:
    image: grafana/grafana:11.2.0
    ports:
      - "3000:3000"
    volumes:
      - ./etc/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./etc/grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./etc/grafana/dashboards:/etc/grafana/dashboards
      - ./data:/var/lib/grafana

  fastapi:
    image: ghcr.io/blueswen/opentelemetry-apm/fastapi:latest
    ports:
      - "8000:8000"
    environment:
      - TARGET_ONE_SVC=spring-boot:8080
      - TARGET_TWO_SVC=spring-boot:8080
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_METRICS_EXPORTER=none
      - OTEL_SERVICE_NAME=fastapi
    command: "opentelemetry-instrument python main.py"
    depends_on:
      - otel-collector

  spring-boot:
    image: ghcr.io/blueswen/opentelemetry-apm/springboot:latest
    ports:
      - "8080:8080"
    environment:
      - TARGET_ONE_SVC=fastapi:8000
      - TARGET_TWO_SVC=fastapi:8000
      - OTEL_EXPORTER=otlp_span
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_EXPORTER_OTLP_INSECURE=true
      - OTEL_METRICS_EXPORTER=none
      - OTEL_SERVICE_NAME=spring-boot
    command: "java -javaagent:/opentelemetry-javaagent.jar -jar /app.jar"
    depends_on:
      - otel-collector

  express:
    image: ghcr.io/blueswen/opentelemetry-apm/express:latest
    ports:
      - "3001:3001"
    environment:
      - EXPOSE_PORT=3001
      - TARGET_ONE_SVC=fastapi:8000
      - TARGET_TWO_SVC=fastapi:8000
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=express
    command: "node --require '@opentelemetry/auto-instrumentations-node/register' app.js"
    depends_on:
      - otel-collector

  k6:
    image: grafana/k6:0.54.0
    volumes:
      - ./etc/k6-script.js:/etc/k6/script.js
    command: "run --vus 1 --duration 3600s /etc/k6/script.js"

  tempo:
    image: grafana/tempo:2.6.0
    command: [ "--target=all", "--storage.trace.backend=local", "--storage.trace.local.path=/var/tempo", "--auth.enabled=false" ]

  prometheus:
    image: prom/prometheus:v2.54.1
    ports:
      - "9090:9090"
    volumes:
      - ./etc/prometheus.yml:/workspace/prometheus.yml
    command:
      - --config.file=/workspace/prometheus.yml

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.111.0
    command:
      - "--config=/conf/config.yaml"
    volumes:
      - ./etc/otel-collector.yaml:/conf/config.yaml
    ports:
      - "4317" # OTLP gRPC receiver
      - "4318" # OTLP http receiver
      - "8889:8889" # Prometheus metrics exporter
    restart: on-failure
    depends_on:
      - jaeger-collector
      - tempo

  jaeger-collector:
    image: jaegertracing/jaeger-collector:1.62.0
    command: 
      - "--cassandra.keyspace=jaeger_v1_dc1"
      - "--cassandra.servers=cassandra"
      - "--collector.otlp.enabled=true"
    ports:
      - "4317" # accept OpenTelemetry Protocol (OTLP) over gRPC
    restart: on-failure
    depends_on:
      - cassandra-schema

  cassandra:
    image: cassandra:4.1.5

  cassandra-schema:
    image: jaegertracing/jaeger-cassandra-schema:1.62.0
    depends_on:
      - cassandra

  jaeger-query:
    image: jaegertracing/jaeger-query:1.62.0
    environment:
      - METRICS_STORAGE_TYPE=prometheus
      - LOG_LEVEL=debug
    command:
      - "--cassandra.keyspace=jaeger_v1_dc1"
      - "--cassandra.servers=cassandra"
      - "--prometheus.server-url=http://prometheus:9090"
      - "--prometheus.query.normalize-duration=true"
      - "--prometheus.query.normalize-calls=true"
    ports:
      - "16686:16686"
      - "16687:16687"
    restart: on-failure
    depends_on:
      - cassandra-schema
